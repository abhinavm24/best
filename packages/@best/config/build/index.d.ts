export declare function readConfig(argsCLI: any, packageRoot: string, parentConfigPath?: string): Promise<{
    configPath: string;
    globalConfig: Readonly<{
        gitIntegration: any;
        detectLeaks: any;
        compareStats: any;
        outputFile: any;
        externalStorage: any;
        projects: any;
        rootDir: any;
        rootProjectName: any;
        nonFlagArgs: any;
        testNamePattern: any;
        testPathPattern: any;
        verbose: any;
        gitCommit: any;
        gitLocalChanges: any;
        gitBranch: any;
        gitRepository: any;
        normalize: any;
        outputMetricPattern: RegExp;
        outputTotals: any;
        outputHistograms: any;
        outputHistogramPattern: RegExp;
        histogramQuantileRange: any;
        histogramMaxWidth: any;
        openPages: any;
    }>;
    projectConfig: Readonly<{
        cache: any;
        cacheDirectory: any;
        useHttp: any;
        cwd: any;
        detectLeaks: any;
        displayName: any;
        globals: any;
        moduleDirectories: any;
        moduleFileExtensions: any;
        moduleLoader: any;
        moduleNameMapper: any;
        modulePathIgnorePatterns: any;
        modulePaths: any;
        name: any;
        plugins: any;
        rootDir: any;
        roots: any;
        projectName: any;
        benchmarkRunner: any;
        benchmarkRunnerConfig: any;
        benchmarkEnvironment: any;
        benchmarkEnvironmentOptions: any;
        benchmarkMaxDuration: any;
        benchmarkMinIterations: any;
        benchmarkIterations: any;
        benchmarkOnClient: any;
        benchmarkOutput: string;
        testMatch: any;
        testPathIgnorePatterns: any;
        testRegex: any;
        testURL: any;
        transform: any;
        transformIgnorePatterns: any;
        samplesQuantileThreshold: any;
    }>;
}>;
export declare function getConfigs(projectsFromCLIArgs: string[], argv: string[]): Promise<{
    configs: any;
    globalConfig: Readonly<{
        gitIntegration: any;
        detectLeaks: any;
        compareStats: any;
        outputFile: any;
        externalStorage: any;
        projects: any;
        rootDir: any;
        rootProjectName: any;
        nonFlagArgs: any;
        testNamePattern: any;
        testPathPattern: any;
        verbose: any;
        gitCommit: any;
        gitLocalChanges: any;
        gitBranch: any;
        gitRepository: any;
        normalize: any;
        outputMetricPattern: RegExp;
        outputTotals: any;
        outputHistograms: any;
        outputHistogramPattern: RegExp;
        histogramQuantileRange: any;
        histogramMaxWidth: any;
        openPages: any;
    }> | undefined;
}>;
